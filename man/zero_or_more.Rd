% Generated by roxygen2: do not edit by hand
% Please edit documentation in R/basic_parsers.R
\name{zero_or_more}
\alias{zero_or_more}
\alias{one_or_more}
\alias{exactly}
\alias{zero_or_one}
\alias{match_n}
\title{Parsers that quantify a parser.}
\usage{
zero_or_more(p)

one_or_more(p)

exactly(n, p)

zero_or_one(p)

match_n(n, p)
}
\arguments{
\item{p}{a parser.}

\item{n}{a positive integer, including 0.}
}
\value{
A parser
}
\description{
Parsers that quantify a parser.
}
\section{Pseudocode}{

\preformatted{
zero_or_more(p):
  (p \%then\% zero_or_more(p)) \%or\% succeed(null)

one_or_more(p):
  p \%then\% zero_or_more(p)

exactly(n,p):
  r = zero_or_more(p)(x)
  if length(r[1]) == n) then r else fail()(x)

zero_or_one:
  exactly(1,p) \%or\% exactly(0,p)

match_n:
  if n==1 then p else (p \%then\% match_n(n-1, p))
}

where \code{null} is the empty vector.
}

\examples{
zero_or_more(literal("A")) (c("A",LETTERS[1:5]))
zero_or_more(literal("A")) (LETTERS[2:5])
one_or_more(literal("A")) (c("A",LETTERS[1:5])) # success
one_or_more(literal("A")) (LETTERS[2:5]) # failure

exactly(2,literal("A")) (c("A", LETTERS[1:5])) # success
exactly(2,literal("A")) (c(rep("A",2), LETTERS[1:5])) # failure: too many "A"

zero_or_one(literal("A")) (LETTERS[2:5]) # success
zero_or_one(literal("A")) (LETTERS[1:5]) # success
zero_or_one(literal("A")) (c("A",LETTERS[1:5])) # failure

match_n(2,literal("A")) (c("A", LETTERS[1:5])) # success
match_n(2,literal("A")) (c(rep("A",2), LETTERS[1:5])) # success

}
