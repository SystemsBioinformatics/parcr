% Generated by roxygen2: do not edit by hand
% Please edit documentation in R/parsers_basic.R
\name{\%ret\%}
\alias{\%ret\%}
\title{Keeping only the left or right result from a \verb{\%then\%} sequence.}
\usage{
p \%ret\% c
}
\arguments{
\item{p}{a parser.}

\item{c}{a single-element character value. \code{NULL} is coerced to
\code{character(0)}.}
}
\value{
A parser

A parser
}
\description{
Sometimes we are not interested in the result from a parser at all, only
that the parser succeeds. For example, if we find a reserved word during
lexical analysis, it may be convenient to return some short representation
rather than the string itself. The \verb{\%ret\%} combinator is useful in such
cases. The parser \code{(p \%ret\% c)} has the same behavior as \code{p}, except that it
returns the value \code{c} if successful
}
\details{
Recall that two parsers composed in sequence produce a pair of results.
Sometimes we are only interested in one component of the pair. For example,
it is common to throw away reserved words such as 'begin' and 'where' during
parsing. In such cases, two special versions of the \verb{\%then\%} combinator are
useful, which throw away either the left or right result values, as reflected
by the position of the letter 'x' in their names.
}
\section{Pseudocode}{


\preformatted{
(p1 \%xthen\% p2)(x):
  if p1(x)==[] or x==null then fail()(x)
  else
    if p2(x[-1])==[] then fail()(x)
    else succeed(p1(x)$L)(x[-2])

(p1 \%thenx\% p2)(x):
  if p1(x)==[] or x==null then fail()(x)
  else
    if p2(x[-1])==[] then fail()(x)
    else succeed(p2(x[-1])$L)(x[-2])
}
where \code{null} is the empty vector, \code{x[-1]} and \code{x[-2]} are the vector \code{x}
without the first element and without the first two elements, respectively.



\preformatted{
(p \%xret\% c)(x):
  if p(x)==[] then fail()(x)
  else succeed(c)(x[-1])
}
}

\examples{
is_number <- function(x) grepl("\\\\d+",x[1])
# Numbers are preceded by ">" symbols, but we only need the number itself
(literal(">") \%thenx\% satisfy(is_number)) (c(">", "12"))
# Temperatures are followed by the unit 'C', but we only need the number
(satisfy(is_number) \%xthen\% literal("C")) (c("21", "C"))
(literal("A") \%ret\% "We have an A!") (LETTERS[1:5])
(literal("A") \%ret\% NULL) (LETTERS[1:5])
}
\seealso{
\link{\%then\%}
Return a fixed value upon successful parsing.

\link{\%using\%}
}
