% Generated by roxygen2: do not edit by hand
% Please edit documentation in R/basic_parsers.R
\name{\%xthen\%}
\alias{\%xthen\%}
\alias{\%thenx\%}
\title{Keeping only the left or right result from a \verb{\%then\%} sequence.}
\usage{
p1 \%xthen\% p2

p1 \%thenx\% p2
}
\arguments{
\item{p1, p2}{two parsers.}
}
\value{
A parser
}
\description{
Keeping only the left or right result from a \verb{\%then\%} sequence.
}
\details{
Recall that two parsers composed in sequence produce a pair of results.
Sometimes we are only interested in one component of the pair. For example,
it is common to throw away reserved words such as 'begin' and 'where' during
parsing. In such cases, two special versions of the \verb{\%then\%} combinator are
useful, which throw away either the left or right result values, as reflected
by the position of the letter 'x' in their names.
}
\section{Pseudocode}{


\preformatted{
(p1 \%xthen\% p2)(x):
  if p1(x)==[] or x==null then fail()(x)
  else
    if p2(x[-1])==[] then fail()(x)
    else succeed(p1(x))(x[-2])

(p1 \%thenx\% p2)(x):
  if p1(x)==[] or x==null then fail()(x)
  else
    if p2(x[-1]) == [] then fail()(x)
    else succeed(p2(x[-1]))(x[-2])
}
}

\examples{
is_number <- function(x) grepl("\\\\d+",x[1])
# Numbers are preceded by ">" symbols, but we only need the number itself
(literal(">") \%thenx\% satisfy(is_number)) (c(">", "12"))
# Temperatures are followed by the unit 'C', but we only need the number
(satisfy(is_number) \%xthen\% literal("C")) (c("21", "C"))
}
\seealso{
\link{\%then\%}
}
