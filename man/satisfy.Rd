% Generated by roxygen2: do not edit by hand
% Please edit documentation in R/basic_parsers.R
\name{satisfy}
\alias{satisfy}
\title{The parser that matches an element using a predicate function.}
\usage{
satisfy(b)
}
\arguments{
\item{b}{a boolean function to determine if the string is accepted.}
}
\description{
\code{satisfy} turns a predicate function into a parser that recognizes strings.
}
\section{Pseudocode}{

\preformatted{
satisfy(b)(x):
  if x==null then
    if b(x) then succeed(x)(null)
  else
    if b(x[1]) then succeed(x[1])(x[-1]) else fail()(x)
}

where \code{x[1]} is the first element of \code{x}, \code{x[-1]} all subsequent elements
(or \code{null} if it only has one element). \code{null} is the empty vector,
equivalent to \code{character(0)} in R. Note that if \code{x==null} then the parser
may still succeed, see examples.
}

\examples{

# define a predicate function that tests whether the next element starts
# with an 'a'
starts_with_a <- function(x) grepl("^a",x)
# Use it in the satisfy parser
satisfy(starts_with_a)(c("abc","def")) # success
satisfy(starts_with_a)(c("bca","def")) # failure
# Using an anonymous function
satisfy(function(x) {length(x)==0})(character(0)) # success
}
